// Code generated by MockGen. DO NOT EDIT.
// Source: logging/loggerfactory.go

// Package mock_logging is a generated GoMock package.
package mock_logging

import (
	gomock "github.com/golang/mock/gomock"
	zerolog "github.com/rs/zerolog"
	reflect "reflect"
)

// MockLoggerFactory is a mock of LoggerFactory interface
type MockLoggerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerFactoryMockRecorder
}

// MockLoggerFactoryMockRecorder is the mock recorder for MockLoggerFactory
type MockLoggerFactoryMockRecorder struct {
	mock *MockLoggerFactory
}

// NewMockLoggerFactory creates a new mock instance
func NewMockLoggerFactory(ctrl *gomock.Controller) *MockLoggerFactory {
	mock := &MockLoggerFactory{ctrl: ctrl}
	mock.recorder = &MockLoggerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoggerFactory) EXPECT() *MockLoggerFactoryMockRecorder {
	return m.recorder
}

// NewNamedLogger mocks base method
func (m *MockLoggerFactory) NewNamedLogger(name string) zerolog.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewNamedLogger", name)
	ret0, _ := ret[0].(zerolog.Logger)
	return ret0
}

// NewNamedLogger indicates an expected call of NewNamedLogger
func (mr *MockLoggerFactoryMockRecorder) NewNamedLogger(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNamedLogger", reflect.TypeOf((*MockLoggerFactory)(nil).NewNamedLogger), name)
}
